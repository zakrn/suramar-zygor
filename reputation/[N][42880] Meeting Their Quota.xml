<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<HBProfile>
    <Name>[Zakrn] Meeting Their Quota</Name>
    <MinDurability>0.2</MinDurability>
    <MinFreeBagSlots>1</MinFreeBagSlots>
    <MinLevel>1</MinLevel>
    <MaxLevel>1000</MaxLevel>
    <MailGrey>false</MailGrey>
    <MailWhite>true</MailWhite>
    <MailGreen>true</MailGreen>
    <MailBlue>true</MailBlue>
    <MailPurple>true</MailPurple>
    <SellGrey>true</SellGrey>
    <SellWhite>false</SellWhite>
    <SellGreen>false</SellGreen>
    <SellBlue>false</SellBlue>
    <SellPurple>false</SellPurple>
    <TargetElites>true</TargetElites>
    <QuestOrder>
        <CustomBehavior File="RunCode" Type="Definition">
            <![CDATA[
                bool IsQuestAvailable( int questId ){
                    return  Lua.GetReturnVal<bool>("SetMapByID(1033); " +
                       " local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID(1033) " +
                       " if (taskInfo) then " +
                            "for i, info  in ipairs(taskInfo) do " +
                               " if info.questId ==   " + questId + " then " +
                                    "return true; " +
                                   " end " +
                           " end " +
                       " end " +
                        "return false;", 0);
                }
            ]]>
        </CustomBehavior>
        <!-- arcwine mini event code, this was interesting to write :P  -->
        <CustomBehavior File="RunCode" Type="Definition">
            <![CDATA[
                const uint GIVER_ID = 109212;
                //interactables
                const uint SHADEFRUIT_ID = 251493;
                const uint PURIFIED_WATER_ID = 251492;
                const uint SILVER_JASMINE_ID = 251494;
                //minigame spells
                const int AURA_STOMP_GRAPES = 217202;

                async Task MakeWine() {
                    var margaux = Unit(GIVER_ID);
                    if( margaux == null )
                    {
                        Logging.Write(System.Windows.Media.Colors.Yellow, "[Zak]: margaux not found");
                    }

                    while( margaux != null && margaux.HasAura(224237) ){
                        if( margaux.HasAura(217204) )
                        {
                            await AddPurifiedWater();
                        }
                        else if( margaux.HasAura(217205))
                        {
                            await AddNightLily();
                        }
                        else if( margaux.HasAura(217203))
                        {
                            await AddShadefruit();
                        }
                        else if( margaux.HasAura(AURA_STOMP_GRAPES))
                        {
                            await StompGrapes();
                        }
                        await Coroutine.Yield();
                    }
                }

                WoWObject GetObj( uint objid)
                {
                    return ObjectManager.GetObjectsOfType<WoWGameObject>()
                        .OrderBy(ret => ret.Distance)
                        .FirstOrDefault(target =>
                            (int)target.Entry == objid );
                }

                async Task AddShadefruit()
                {
                    Logging.Write(System.Windows.Media.Colors.Yellow, "[Zak]: AddShadefruit");
                    await LeaveGrapes();
                    WoWObject fruit = GetObj(SHADEFRUIT_ID);
                    if( fruit != null )
                        fruit.Interact();
                    await Coroutine.Sleep(3000);
                    await Coroutine.Yield();
                }

                async Task AddNightLily()
                {   
                    Logging.Write(System.Windows.Media.Colors.Yellow, "[Zak]: AddNightLily");
                    //this spell name doesnt match Silver Jasmine object
                    await LeaveGrapes();
                    WoWObject silverJasmine = GetObj(SILVER_JASMINE_ID);
                    if( silverJasmine != null )
                        silverJasmine.Interact();
                    await Coroutine.Sleep(3000);
                    await Coroutine.Yield();
                }

                async Task AddPurifiedWater() 
                {
                    Logging.Write(System.Windows.Media.Colors.Yellow, "[Zak]: AddPurifiedWater");
                    await LeaveGrapes();
                    WoWObject water = GetObj(PURIFIED_WATER_ID);
                    if( water != null )
                        water.Interact();
                    await Coroutine.Sleep(3000);
                    await Coroutine.Yield();
                }

                async Task StompGrapes() {
                    Logging.Write(System.Windows.Media.Colors.Yellow, "[Zak]: StompGrapes");
                    await HopInGrapes();

                    var margaux = Unit(GIVER_ID);
                    while( margaux != null && margaux.HasAura(224237) && margaux.HasAura(AURA_STOMP_GRAPES) )
                    {
                        Lua.DoString("JumpOrAscendStart()");
                        await Coroutine.Sleep(1000);
                        await Coroutine.Yield();
                    }
                }

                async Task LeaveGrapes() {
                    WoWPoint grapeGoto = new WoWPoint(1354.776,3297.472,132.8778);
                    while (Me.Location.Distance(grapeGoto) > 1)
                    {   
                        WoWMovement.ClickToMove(grapeGoto);
                        await Coroutine.Yield();
                    }
                    await CommonCoroutines.StopMoving();
                }

                async Task HopInGrapes() {
                    await LeaveGrapes();
                    Me.SetFacing( new WoWPoint(1358.507,3294.529,133.5807) );
                    await Coroutine.Sleep(500);
                    Lua.DoString("MoveForwardStart()");
                    await Coroutine.Sleep(150);
                    Lua.DoString("JumpOrAscendStart()");
                    await Coroutine.Sleep(150);
                    Lua.DoString("MoveForwardStop()");
                }

            ]]>
        </CustomBehavior>
        <!-- mask usage code -->
        <CustomBehavior File="RunCode" Type="Definition">
            <![CDATA[
                bool ShouldCastMask()
                    {
                        return !Me.IsCasting && Me.IsAlive && IsInCity() && (!Me.HasAura(202477) && !Me.HasAura(208824));
                    }

                    async Task CastMask()
                    {
                        if( HasItem(136600) )
                        {
                            var item = StyxWoW.Me.BagItems.FirstOrDefault(x => x.Entry == 136600);
                            Logging.Write(System.Windows.Media.Colors.Yellow, "[Zak]: using " + item.Name);
                            item.Use();
                            await Coroutine.Sleep(2200);
                            await Coroutine.Wait(1600, () => !SpellManager.GlobalCooldown);
                            await Coroutine.Wait(2500, () => !Me.IsCasting);
                        }
                        else
                        {
                            Lua.DoString("ExtraActionButton1:Click();");
                        }
                        await Coroutine.Yield();
                    }

                    bool IsInCity()
                    {
                        return  Me.ZoneId == 7637 && //Suramar
                                (Me.SubZoneId == 7963 || //The Grand Promenade
                                Me.SubZoneId == 8021 || //Lunastre Estate
                                Me.SubZoneId == 8434 || //Starcaller Retreat
                                Me.SubZoneId == 8382 || //The Waning Crescent
                                Me.SubZoneId == 8383 || //Artisan's Gallery
                                Me.SubZoneId == 8395 || //Astravar Harbor
                                Me.SubZoneId == 8385 || //Evermoon Bazaar
                                Me.SubZoneId == 7970 || //Evermoon Commons
                                Me.SubZoneId == 8386 || //Shimmershade Garden
                                Me.SubZoneId == 8398 || //Terrace of Order
                                Me.SubZoneId == 8345 || //Estate of the First Arcanist
                                Me.SubZoneId == 8149 || //Twilight Vineyards
                                Me.SubZoneId == 8353 || //Concourse of Destiny
                                Me.SubZoneId == 8397 || //Terrace of Enlightenment
                                Me.SubZoneId == 8441 || //Moonbeam Causeway
                                Me.SubZoneId == 8436 || //Sunset Park
                                Me.SubZoneId == 8351 || //The Menagerie
                                Me.SubZoneId == 8379 || //The Gilded Market
                                Me.SubZoneId == 8378 || //Moonlit Landing
                                Me.SubZoneId == 8431 || //Sanctum of Order
                                Me.SubZoneId == 8380 || //Midnight Court
                                Me.SubZoneId == 8487 ||
                                Me.SubZoneId == 8148);   //Suramar City
                    }
            ]]>
        </CustomBehavior>
        <CustomBehavior File="Hooks\DoWhen" UseWhen="ShouldCastMask()" ActivityName="applyMask" StopMovingToConductActivity="true" AllowUseWhileMounted="true">
            <CustomBehavior File="RunCode" Code="await CastMask()" />
        </CustomBehavior>
        <If Condition="IsQuestAvailable(42880)">
            <If Condition="Me.SubZoneId != 8149">
                <CustomBehavior File="InteractWith" MobId="254139" NumOfTimes="1" X="1780.958" Y="4611.25" Z="124.0134" />
            </If>
            <If Condition="!IsQuestCompleted(42880)">
                <CustomBehavior File="InteractWith" QuestId="42880" MobId="109202" NumOfTimes="1" PreInteractMountStrategy="Dismount" InteractByGossipOptions="1" X="1355.248" Y="3289.176" Z="132.8778" />
                <CustomBehavior File="WaitTimer" WaitTime="3000" />
                <CustomBehavior File="RunCode" Code="await MakeWine();" />
            </If>
        </If>
        <!-- use whistle -->
        <!-- <If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0">
            <CustomBehavior File="UseItem" ItemId="141605" WaitTime="2000" />
        </If>
        <CustomBehavior File="LoadProfile" ProfileName="./[N] Daily Loader" RememberProfile="false" />
    </QuestOrder> -->
    </QuestOrder>
</HBProfile>
