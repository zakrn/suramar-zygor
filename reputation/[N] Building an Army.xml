<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Name>[N] Building an Army</Name>
    <MinDurability>0.3</MinDurability>
    <MinFreeBagSlots>3</MinFreeBagSlots>
    <SellGrey>true</SellGrey>
    <SellWhite>false</SellWhite>
    <SellGreen>false</SellGreen>
    <SellBlue>false</SellBlue>
    <SellPurple>false</SellPurple>
    <MailGrey>false</MailGrey>
    <MailWhite>true</MailWhite>
    <MailGreen>true</MailGreen>
    <MailBlue>true</MailBlue>
    <MailPurple>true</MailPurple>
    <TargetElites>true</TargetElites>
    <!--These aren't used often, only if there are navigation issues with the profile or areas you want the character to avoid-->
    <Blackspots>
    </Blackspots>
    <!--These are the vendors you want the bot to go to when doing a repair or vendor run-->
    <Vendors>
    </Vendors>
    <!--These are the locations of the available mailboxes that you want your character to use-->
    <Mailboxes>
    </Mailboxes>
    <!--Setting these would make sure the character stays away from and does not attack these mobs-->
    <AvoidMobs>
    </AvoidMobs>
    <!--Here is where the meat of the profile will take place-->
    <QuestOrder>
        <CustomBehavior File="RunCode" Type="Definition">
            <![CDATA[

                    bool DoQuest(params uint[] questIds)
                    {
                        foreach (var questId in questIds)
                        {
                            if (HasQuest(questId) && !IsQuestCompleted(questId)) return true;
                        }
                        return false;
                    }
                    bool NeedsQuest(params uint[] questIds)
                    {
                        foreach (var questId in questIds)
                        {
                            if (!HasQuest(questId) && !IsQuestCompleted(questId)) return true;
                        }
                        return false;
                    }
                    bool NeedsBreadcrumbQuest(params uint[] questIds)
                    {
                        foreach (var questId in questIds)
                        {
                            if (IsQuestCompleted(questId)) return false;
                        }
                        return true;
                    }
                    bool QuestDone(params uint[] questIds)
                    {
                        foreach (var questId in questIds)
                        {
                            if (HasQuest(questId) && IsQuestCompleted(questId)) return true;
                        }
                        return false;
                    }

                    bool HasAncientMana( uint amount )
                    {
                        return WoWCurrency.GetCurrencyById(1155) != null && WoWCurrency.GetCurrencyById(1155).Amount >= amount;
                    }

                    uint MaxAncientMana()
                    {
                        if( WoWCurrency.GetCurrencyById(1155) != null )
                        {
                            return WoWCurrency.GetCurrencyById(1155).TotalMax;
                        }
                        return 0;
                    }

                    double CalcDist( Vector2 v1, Vector2 v2 )
                    {
                        double dx = v2.X - v1.X;
                        double dy =  v2.Y - v1.Y;
                        double r = Math.Pow( dx , 2) - Math.Pow( dy, 2);

                        if( r < 0 )
                            r *= -1;

                        return Math.Sqrt(  r );
                    }

                    bool IsThirsty( uint friendId )
                    {
                        List<string> values = Lua.GetReturnValues("return GetFriendshipReputation(" + friendId +")");

                        if( values.Count == 0 )
                        {   
                            Logging.Write(System.Windows.Media.Colors.Red, "[Zak]: Failed to get arcane thirst");
                            return false;
                        }

                        int level = Int32.Parse( values[1]);
                        int threshold = Int32.Parse( values[7]);
                        int newlevel = level - threshold;

                        return newlevel <= 1;
                    }

                    bool IsThalyssraThirsty()
                    {
                        return IsThirsty(1860);
                    }

                    bool IsOculethThirsty()
                    {
                        return IsThirsty(1862);
                    }

                    bool IsValtroisThirsty()
                    {
                        return IsThirsty(1919);
                    }

                    void PrintStep( uint step )
                    {
                        Logging.Write(System.Windows.Media.Colors.Yellow, "[Zak]: " + step);
                    }

                    void Print( string msg )
                    {
                        Logging.Write(System.Windows.Media.Colors.Yellow, "[Zak]: " + msg);
                    }

                    int StageNumber() {
                        return Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber;
                    }

                    WoWUnit NearestBuddy()
                    {
                        return ObjectManager.GetObjectsOfType<WoWUnit>()
                            .OrderBy(ret => ret.Distance)
                            .FirstOrDefault(target =>
                                target.Distance <= 30 &&
                                target.IsAlive &&
                                (int)target.FactionId == 1665 &&
                                (int)target.Entry == 110141 );
                    }

                    bool IsNearBuddy() 
                    {
                        return NearestBuddy() != null;
                    }

                    bool FetchBuddy()
                    {
                        WoWUnit obj = NearestBuddy();
                        if( obj != null)
                        {
                            Navigator.MoveTo(obj.Location);
                            obj.Interact();
                            return true;
                        }
                        return false;
                    }

                ]]>
        </CustomBehavior>
        <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;[Zak]: ZoneId: &quot; + Me.AreaId);" />
        <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Yellow, &quot;[Zak]: StageNumber: &quot; + Bots.DungeonBuddy.Helpers.ScenarioInfo.Current.CurrentStageNumber );" />
        
        <!-- TRAINING SCENARIO -->
        <If Condition="StageNumber() == 1" >
            <CustomBehavior File="InteractWith" MobIds="109008" NumOfTimes="1" InteractByGossipOptions="1" X="2102.989" Y="5392.836" Z="48.12273" />
        </If>

<!--         <CustomBehavior File="Hooks\DoWhen" UseWhen="IsNearBuddy()" LogExecution="true" ActivityName="killbat" >
            <CustomBehavior File="InteractWith" FactionId1="1665" MobId1="110141" NumOfTimes="1" InteractByGossipOptions="1" />
        </CustomBehavior> -->

        <While Condition="StageNumber() == 2" >
            <CustomBehavior File="KillUntilComplete" TerminateWhen="StageNumber() != 2">
                <Blackspots>
                </Blackspots>
                <PursuitList>
                    <PursueUnit Id="110771" />
                    <PursueUnit Id="110370" />
                    <PursueUnit Id="110371" />
                    <PursueUnit Id="110028" />
                    <PursueUnit Id="110369" />
                    <PursueUnit Id="110374" />
                    <PursueUnit Id="110373" />
                </PursuitList>
                <HuntingGrounds WaypointVisitStrategy="InOrder">
                    <Hotspot X="2238.1" Y="5520.415" Z="1.640649" />
                    <Hotspot X="2182.601" Y="5340.604" Z="36.87735" />
                    <Hotspot X="2211.059" Y="5513.781" Z="2.456362" />
                    <Hotspot X="2184.996" Y="5536.097" Z="1.640901" />
                    <Hotspot X="2183.622" Y="5437.963" Z="2.455849"  />
                    <Hotspot X="2149.939" Y="5432.132" Z="1.641164" />
                    <Hotspot X="2215.865" Y="5480.848" Z="-24.81746"  />
                    <Hotspot X="2179.644" Y="5514.032" Z="-25.09391"  />
                    <Hotspot X="2205.223" Y="5447.873" Z="-25.09367" />
                    <Hotspot X="2166.159" Y="5451" Z="-25.09335" />
                    <Hotspot X="2154.367" Y="5481.855" Z="-25.09366" />
                    <Hotspot X="2104.992" Y="5491.617" Z="2.94622"  />
                    <Hotspot X="2098.97" Y="5425.288" Z="-34.42006"  />
                    <Hotspot X="2106.7" Y="5380.214" Z="-36.91072"  />
                    <Hotspot X="2062.226" Y="5400.027" Z="-34.82651"  />
                    <Hotspot X="1985.431" Y="5442.301" Z="-36.515"  />
                    <Hotspot X="1954.135" Y="5395.235" Z="-37.15387"  />
                    <Hotspot X="1932.193" Y="5400.017" Z="-29.44996"  />
                    <Hotspot X="1901.371" Y="5363.266" Z="-37.1947"  />
                    <Hotspot X="1856.103" Y="5373.897" Z="-53.81489"  />
                </HuntingGrounds>
            </CustomBehavior>
        </While>

        <!-- <CustomBehavior File="Hooks\DoWhen" ActivityName="killbat" Command="Remove" /> -->


        <CustomBehavior File="RunCode" Code="Print(&quot;looting chest&quot;)" />
        <If Condition="StageNumber() == 3">
            <CustomBehavior File="InteractWith" MobIds="252451" NumOfTimes="1" X="2098.582" Y="5395.352" Z="47.30122" WaitForNpcs="false" />
            <CustomBehavior File="InteractWith" MobIds="252452" NumOfTimes="1" X="2098.582" Y="5395.352" Z="47.30122" WaitForNpcs="false" />
        </If>

        <CustomBehavior File="RunCode" Code="Print(&quot;using rep items&quot;)" />
        <While Condition="HasItem(140260)">
            <CustomBehavior File="UseItem" ItemId="140260" />
        </While>
        <While Condition="HasItem(141870)">
            <CustomBehavior File="UseItem" ItemId="141870" />
        </While>

        <CustomBehavior File="InteractWith" MobIds="258976" NumOfTimes="1" X="2098.582" Y="5395.352" Z="47.30122" WaitForNpcs="false" />
        <CustomBehavior File="RunMacro" Macro="/click StaticPopup1Button1" />

    </QuestOrder>
</HBProfile>
