<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <!-- Original contribution by EchoTiger -->
    <!-- All credit to the amazing world quest team on this one -->
    <!-- https://www.thebuddyforum.com/honorbuddy-forum/honorbuddy-profiles/269163-progress-world-quests.html -->
    <Name>44857-[N]-[QUEST]-Wq-Not There, Not Then, Not Forever-Zinner.xml</Name>
    <MinDurability>0.3</MinDurability>
    <MinFreeBagSlots>3</MinFreeBagSlots>
    <SellGrey>true</SellGrey>
    <SellWhite>false</SellWhite>
    <SellGreen>false</SellGreen>
    <SellBlue>false</SellBlue>
    <SellPurple>false</SellPurple>
    <MailGrey>false</MailGrey>
    <MailWhite>true</MailWhite>
    <MailGreen>true</MailGreen>
    <MailBlue>true</MailBlue>
    <MailPurple>true</MailPurple>
    <TargetElites>true</TargetElites>
    <QuestOrder>
        <CustomBehavior File="RunCode" Type="Definition">
            <![CDATA[
            

    public class WorldQuestData
    {
        public int ID;
        public string Name;
        public DateTime ExpireTime;
    }


    public static class WorldQuestInfo
    {
        static List<WorldQuestData> _cache = new List<WorldQuestData>();
        static internal bool _dirty = true;
        static internal bool _setup = false;

        static WorldQuestInfo()
        {
            Setup();
        }

        public static void Setup()
        {
            if (_setup)
                return;

            Lua.Events.AttachEvent("WORLD_MAP_UPDATE", WorldQuestMarkDirty);
            Lua.Events.AttachEvent("SUPER_TRACKED_QUEST_CHANGED", WorldQuestMarkDirty);
            Lua.Events.AttachEvent("WORLD_QUEST_COMPLETED_BY_SPELL", WorldQuestMarkDirty);

            UpdateWorldQuests();
            _setup = true;
        }

        public static void WorldQuestMarkDirty(object sender, LuaEventArgs args)
        {
            _dirty = true;
        }

        public static bool HasWorldQuest(int questid)
        {
            UpdateWorldQuests();

            var quest = _cache.Where(q => q.ID == questid).FirstOrDefault();

            if (quest == null || quest.ExpireTime <= DateTime.UtcNow)
                return false;
            return true;
        }

        public static void UpdateWorldQuests()
        {
            if (!_dirty)
                return;
            _cache = new List<WorldQuestData>();
            
            var player = StyxWoW.Me;
            int BrokenIslesMapArea = 1007;

            var ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetNumZones({0});", BrokenIslesMapArea));
            
            var NumZones = int.Parse(ret[0]);

            for (int i = 1; i <= NumZones; ++i)
            {
                ret = Lua.GetReturnValues(string.Format("return C_MapCanvas.GetZoneInfo({0}, {1});", BrokenIslesMapArea, i));

                var ZoneID = int.Parse(ret[0]);
                var ZoneName = ret[1];
                var ZoneDepth = int.Parse(ret[2]);

                if (ZoneDepth > 1) //Do not look at subzones
                {
                    Logging.WriteDiagnostic(string.Format("Ignoring {0} ({1}) as ZoneDepth > 1 ({2})", ZoneID, ZoneName, ZoneDepth));
                    continue;
                }

                string ToRun = string.Format(@"     local questids = {{}};

                                                    local taskInfo = C_TaskQuest.GetQuestsForPlayerByMapID({0}, {1});

                                                    if taskInfo then
                                                                    for i, info in ipairs(taskInfo) do
                                                                        if HaveQuestData(info.questId) then
                                                                            if QuestUtils_IsQuestWorldQuest(info.questId) then
                                                                                    table.insert(questids, info.questId);
                                                                                end
                                                                            end
                                                                        end
                                                                    end
                                                   return unpack(questids);
                                                ", ZoneID, BrokenIslesMapArea);

                ret = Lua.GetReturnValues(ToRun);

                foreach (var q in ret)
                {
                    int questid = int.Parse(q);

                    //TimeLeft is in minutes
                    var TimeLeft = Lua.GetReturnVal<int>(string.Format("return C_TaskQuest.GetQuestTimeLeftMinutes({0});", questid), 0);
                    var QuestInfo = Lua.GetReturnValues(string.Format("return C_TaskQuest.GetQuestInfoByQuestID({0});", questid));

                    Logging.WriteDiagnostic("WorldQuest {0} ({2}) active ({1}m left)", QuestInfo[0], TimeLeft, questid);

                    var data = new WorldQuestData();
                    data.ID = questid;
                    data.Name = QuestInfo[0];
                    data.ExpireTime = DateTime.UtcNow.AddMinutes(TimeLeft);
                    _cache.Add(data);
                }
            }

            _dirty = false;
        }

        public static bool IsWorldQuest(int questid)
        {
            string lua = string.Format("tagID, tagName, worldQuestType, rarity, isElite, tradeskillLineIndex = GetQuestTagInfo({0});", questid);

            var ret = Lua.GetReturnValues(lua);

            if (ret[3] == null)
                return false;
            return true;
        }
    }


                ]]>
        </CustomBehavior>
        <While Condition="WorldQuestInfo.HasWorldQuest(44857)">
            <!-- Get in range of quest to activate -->
            <RunTo X="2599.003" Y="5607.023" Z="178.3525" />
            <PickUp Nav="Fly" QuestName="Not There, Not Then, Not Forever" QuestId="44857" GiverName="" GiverId="" />
            <Objective QuestName="Not There, Not Then, Not Forever" QuestId="44857" Type="KillMob" MobId="106765" KillCount="7" />
            <Objective QuestName="Not There, Not Then, Not Forever" QuestId="44857" Type="KillMob" MobId="106764" KillCount="10" />
            <TurnIn Nav="Fly" QuestName="Not There, Not Then, Not Forever" QuestId="44857" TurnInName="" TurnInId="" />
        </While>
        <While Condition="WorldQuestInfo.HasWorldQuest(44857)">
            <RunTo X="2599.003" Y="5607.023" Z="178.3525" />
            <CustomBehavior File="KillUntilComplete" MobIds="106765, 106764" TerminateWhen="WorldQuestInfo.HasWorldQuest(44857) == false">
                <HuntingGrounds>
                    <Hotspot X="2577.946" Y="5578.055" Z="177.9498" />
                    <Hotspot X="2678.354" Y="5583.09" Z="194.9198" />
                    <Hotspot X="2663.916" Y="5643.792" Z="197.0424" />
                    <Hotspot X="2618.212" Y="5712.369" Z="184.7817" />
                    <Hotspot X="2581.813" Y="5623.116" Z="177.0489" />
                    <Hotspot X="2585.328" Y="5577.912" Z="180.1645" />
                    <Hotspot X="2573.964" Y="5495.727" Z="154.008" />
                    <Hotspot X="2653.415" Y="5479.208" Z="162.8133" />
                </HuntingGrounds>
            </CustomBehavior>
        </While>
        <If Condition="HasItem(141605) &amp;&amp; Me.BagItems.FirstOrDefault(h =&gt; h.Entry == 141605).CooldownTimeLeft.TotalMilliseconds == 0">
            <CustomBehavior File="UseItem" ItemId="141605" WaitTime="2000" />
        </If>
        <CustomBehavior File="LoadProfile" ProfileName="./[N] Daily Loader" RememberProfile="false" />
    </QuestOrder>
</HBProfile>
