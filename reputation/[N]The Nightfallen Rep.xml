<HBProfile xsi:noNamespaceSchemaLocation="../Schemas/EchoSchema.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Name>[N] The Nightfallen Rep</Name>
    <MinDurability>0.3</MinDurability>
    <MinFreeBagSlots>3</MinFreeBagSlots>
    <SellGrey>true</SellGrey>
    <SellWhite>false</SellWhite>
    <SellGreen>false</SellGreen>
    <SellBlue>false</SellBlue>
    <SellPurple>false</SellPurple>
    <MailGrey>false</MailGrey>
    <MailWhite>true</MailWhite>
    <MailGreen>true</MailGreen>
    <MailBlue>true</MailBlue>
    <MailPurple>true</MailPurple>
    <TargetElites>true</TargetElites>
    <!--These aren't used often, only if there are navigation issues with the profile or areas you want the character to avoid-->
    <Blackspots>
        <Blackspot X="879.0854" Y="5259.045" Z="48.92279" Radius="2.93233" />
    </Blackspots>
    <!--These are the vendors you want the bot to go to when doing a repair or vendor run-->
    <Vendors>
    </Vendors>
    <!--These are the locations of the available mailboxes that you want your character to use-->
    <Mailboxes>
    </Mailboxes>
    <!--Setting these would make sure the character stays away from and does not attack these mobs-->
    <AvoidMobs>
        <Mob Name="Koralune Ettin" Entry="99791" />
        <Mob Name="Elfbane" Entry="99792" />
    </AvoidMobs>
    <!--Here is where the meat of the profile will take place-->
    <QuestOrder>
        <CustomBehavior File="RunCode" Type="Definition">
            <![CDATA[

                    bool DoQuest(params uint[] questIds)
                    {
                        foreach (var questId in questIds)
                        {
                            if (HasQuest(questId) && !IsQuestCompleted(questId)) return true;
                        }
                        return false;
                    }
                    bool NeedsQuest(params uint[] questIds)
                    {
                        foreach (var questId in questIds)
                        {
                            if (!HasQuest(questId) && !IsQuestCompleted(questId)) return true;
                        }
                        return false;
                    }
                    bool NeedsBreadcrumbQuest(params uint[] questIds)
                    {
                        foreach (var questId in questIds)
                        {
                            if (IsQuestCompleted(questId)) return false;
                        }
                        return true;
                    }
                    bool QuestDone(params uint[] questIds)
                    {
                        foreach (var questId in questIds)
                        {
                            if (HasQuest(questId) && IsQuestCompleted(questId)) return true;
                        }
                        return false;
                    }

                    bool HasAncientMana( int amount )
                    {
                        return WoWCurrency.GetCurrencyById(1155) != null && WoWCurrency.GetCurrencyById(1155).Amount >= amount;
                    }

                    int MaxAncientMana()
                    {
                        if( WoWCurrency.GetCurrencyById(1155) != null )
                        {
                            return (int)WoWCurrency.GetCurrencyById(1155).TotalMax;
                        }
                        return 0;
                    }

                    double DistFrom253()
                    {
                        Vector2 loc = new Vector2( Me.Location.X, Me.Location.Y);
                        Vector2 res = new Vector2( 2949.458f, 4882.862f );

                        return CalcDist( loc, res );
                    }

                    double CalcDist( Vector2 v1, Vector2 v2 )
                    {
                        double dx = v2.X - v1.X;
                        double dy =  v2.Y - v1.Y;
                        double r = Math.Pow( dx , 2) - Math.Pow( dy, 2);

                        if( r < 0 )
                            r *= -1;

                        return Math.Sqrt(  r );
                    }

                    bool ShouldCastMask()
                    {
                        return Me.IsAlive && IsInCity() && !Me.HasAura(202477);
                    }

                    void CastMask()
                    {
                        Lua.DoString("ExtraActionButton1:Click();");
                    }

                    bool IsInCity()
                    {
                        return  Me.SubZoneId == 7963 || //The Grand Promenade
                                Me.SubZoneId == 8021 || //Lunastre Estate
                                Me.SubZoneId == 8434 || //Starcaller Retreat
                                Me.SubZoneId == 8382 || //The Waning Crescent
                                Me.SubZoneId == 8383 || //Artisan's Gallery
                                Me.SubZoneId == 8395 || //Astravar Harbor
                                Me.SubZoneId == 8385 || //Evermoon Bazaar
                                Me.SubZoneId == 7970 || //Evermoon Commons
                                Me.SubZoneId == 8386 || //Shimmershade Garden
                                Me.SubZoneId == 8398 || //Terrace of Order
                                Me.MinimapZoneText == "Estate of the First Arcanist" ||
                                Me.SubZoneId == 8149 || //Twilight Vineyards
                                Me.SubZoneId == 8353 || //Concourse of Destiny
                                Me.SubZoneId == 8397 || //Terrace of Enlightenment
                                Me.SubZoneId == 8441 || //Moonbeam Causeway
                                Me.SubZoneId == 8436 || //Sunset Park
                                Me.SubZoneId == 8351 || //The Menagerie
                                Me.SubZoneId == 8379 || //The Gilded Market
                                Me.SubZoneId == 8378 || //Moonlit Landing
                                Me.SubZoneId == 8431 || //Sanctum of Order
                                Me.SubZoneId == 8148;   //Suramar City
                    }

                    bool IsThirsty( uint friendId )
                    {
                        List<string> values = Lua.GetReturnValues("return GetFriendshipReputation(" + friendId +")");

                        if( values.Count == 0 )
                        {   
                            Logging.Write(System.Windows.Media.Colors.Red, "[Zak]: Failed to get arcane thirst");
                            return false;
                        }

                        int level = Int32.Parse( values[1]);
                        int threshold = Int32.Parse( values[7]);
                        int newlevel = level - threshold;

                        return newlevel <= 1;
                    }

                    bool IsThalyssraThirsty()
                    {
                        return IsThirsty(1860);
                    }

                    bool IsOculethThirsty()
                    {
                        return IsThirsty(1862);
                    }

                    bool IsValtroisThirsty()
                    {
                        return IsThirsty(1919);
                    }

                    void PrintStep( uint step )
                    {
                        Logging.Write(System.Windows.Media.Colors.Yellow, "[Zak]: " + step);
                    }

                    bool CanDoArmyTraining(){
                        List<string> values = Lua.GetReturnValues("return GetGossipOptions()");
                        var matches = values.FirstOrDefault( str => str.Contains("I've come to help the withered with their combat training."));
                        return matches != null;
                    }
                    
                ]]>
        </CustomBehavior>

        <!-- settings setup, original credit to the Nuok and the world quests team-->
        <CustomBehavior File="RunCode" Type="Definition">
        <![CDATA[
                public class Settings : Styx.Helpers.Settings
                {
                    public static readonly string _settingsPath = Path.Combine(CharacterSettingsDirectory, "Profiles", "ZakrnSuramarSettings.xml");
                    private static Settings _instance;
                    public static Settings Instance => _instance ?? (_instance = new Settings());
                    public Settings() : base(_settingsPath)
                    {
                    }
                    [Setting]
                    [Styx.Helpers.DefaultValue(100)]
                    public int ManaTarget { get; set; }

                    [Setting]
                    [Styx.Helpers.DefaultValue("")]
                    public string ReturnProfile { get; set; }

                }

                void SetManaTarget( int manaTarget){
                    var s = Settings.Instance;
                    s.ManaTarget = manaTarget;
                    s.Save();
                }

                void PrepManaFarm( string returnProfile, int manaGoal )
                {
                    SetManaTarget( manaGoal );
                    var s = Settings.Instance;
                    s.ReturnProfile = returnProfile;
                    s.Save();
                }
        ]]>
        </CustomBehavior> 
        
        <!-- do the daily 50 mana rep boosts -->

        <If Condition="!HasAncientMana(150)">
            <CustomBehavior File="RunCode" Code="PrepManaFarm(&quot;REP&quot;, 150)" />
            <CustomBehavior File="LoadProfile" ProfileName="..\gather\[N]-Ancient-Mana" RememberProfile="true" />
        </If>

        <MoveTo X="1716.453" Y="4625.14" Z="123.9462" />

        <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Green, &quot;[Zak]: Checking Thalyssra&quot;);" />
        <If Condition="IsThalyssraThirsty()">
            <CustomBehavior File="InteractWith" MobId="97140" X="1724.658" Y="4614.287" Z="123.7945"  />
            <CustomBehavior File="RunMacro" Macro="/click GossipTitleButton1" />
            <CustomBehavior File="RunMacro" Macro="/click QuestFrameCompleteButton" />
            <CustomBehavior File="RunMacro" Macro="/click QuestFrameCompleteQuestButton" />
        </If>

        <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Green, &quot;[Zak]: Checking Valtrois&quot;);" />
        <If Condition="IsValtroisThirsty()">
            <CustomBehavior File="InteractWith" MobId="103155" X="1731.536" Y="4606.796" Z="123.8035" />
            <CustomBehavior File="RunMacro" Macro="/click QuestFrameCompleteButton" />
            <CustomBehavior File="RunMacro" Macro="/click QuestFrameCompleteQuestButton" />
        </If>

        <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Green, &quot;[Zak]: Checking Oculeth&quot;);" />
        <If Condition="IsOculethThirsty()">
            <CustomBehavior File="InteractWith" MobId="98548" X="1773.629" Y="4626.259" Z="123.9869" />
            <CustomBehavior File="RunMacro" Macro="/click QuestFrameCompleteButton" />
            <CustomBehavior File="RunMacro" Macro="/click QuestFrameCompleteQuestButton" />
        </If>

        <!-- check withered army training -->
        <CustomBehavior File="InteractWith" MobId="97140" X="1724.658" Y="4614.287" Z="123.7945"  />
        <If Condition="CanDoArmyTraining()">
            <If Condition="!HasAncientMana(MaxAncientMana())">
                <CustomBehavior File="RunCode" Code="PrepManaFarm(&quot;REP&quot;, MaxAncientMana())" />
                <CustomBehavior File="LoadProfile" ProfileName="..\gather\[N]-Ancient-Mana" RememberProfile="true" />
            </If>

            <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Green, &quot;[Zak]: Can Train Army&quot;);" />
            
            <If Condition="MaxAncientMana() &gt;= 2000">
                <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Green, &quot;[Zak]: Spending 2000 mana&quot;);" />
                <CustomBehavior File="Misc\RunLua" Lua="SelectGossipOption(1);" WaitTime="500" />
                <CustomBehavior File="Misc\RunLua" Lua="SelectGossipOption(5);" WaitTime="500" />
                <CustomBehavior File="RunMacro" Macro="/click StaticPopup1Button1" />
                <CustomBehavior File="LoadProfile" ProfileName="[N] Building an Army" RememberProfile="true" />

            <ElseIf Condition="MaxAncientMana() &gt;= 1300">
                <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Green, &quot;[Zak]: Spending 1300 mana&quot;);" />
                <CustomBehavior File="RunMacro" Macro="/click GossipTitleButton1" />
                <CustomBehavior File="RunMacro" Macro="/click GossipTitleButton4" />
                <CustomBehavior File="RunMacro" Macro="/click StaticPopup1Button1" />
                <CustomBehavior File="LoadProfile" ProfileName="[N] Building an Army" RememberProfile="true" />
            </ElseIf>
            
            <ElseIf Condition="MaxAncientMana() &gt;= 900">
                <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Green, &quot;[Zak]: Spending 900 mana&quot;);" />
                <CustomBehavior File="RunMacro" Macro="/click GossipTitleButton1" />
                <CustomBehavior File="RunMacro" Macro="/click GossipTitleButton3" />
                <CustomBehavior File="RunMacro" Macro="/click StaticPopup1Button1" />            
                <CustomBehavior File="LoadProfile" ProfileName="[N] Building an Army" RememberProfile="true" />
            </ElseIf>
           
            <ElseIf Condition="MaxAncientMana() &gt;= 650">
                <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Green, &quot;[Zak]: Spending 650 mana&quot;);" />
                <CustomBehavior File="RunMacro" Macro="/click GossipTitleButton1" />
                <CustomBehavior File="RunMacro" Macro="/click GossipTitleButton2" />
                <CustomBehavior File="RunMacro" Macro="/click StaticPopup1Button1" />            
                <CustomBehavior File="LoadProfile" ProfileName="[N] Building an Army" RememberProfile="true" />
            </ElseIf>
            
            <ElseIf Condition="MaxAncientMana() &gt;= 400">
                <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Green, &quot;[Zak]: Spending 400 mana&quot;);" />
                <CustomBehavior File="RunMacro" Macro="/click GossipTitleButton1" />
                <CustomBehavior File="RunMacro" Macro="/click GossipTitleButton1" />
                <CustomBehavior File="RunMacro" Macro="/click StaticPopup1Button1" />          
                <CustomBehavior File="LoadProfile" ProfileName="[N] Building an Army" RememberProfile="true" />
            </ElseIf>
            
            <Else>
                <CustomBehavior File="RunCode" Code="Logging.Write(System.Windows.Media.Colors.Red, &quot;[Zak]: Maximum Ancient Mana too low to train.&quot;);" />
            </Else>
            </If>

        </If>

        

    </QuestOrder>
</HBProfile>
